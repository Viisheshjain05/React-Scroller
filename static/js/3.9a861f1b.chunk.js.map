{"version":3,"sources":["components/tinyProjects/Small_Projects/project-userInputoutput/userInputOutput/ProjectDetail-UserInputOutput.module.css","components/tinyProjects/Small_Projects/project-userInputoutput/userInputOutput/ProjectDetail-UserInputOutput.js","components/tinyProjects/Small_Projects/project-userInputoutput/userInputOutput/UserOutput.js","components/tinyProjects/Small_Projects/project-userInputoutput/userInputOutput/UserInput.js","components/tinyProjects/Small_Projects/project-userInputoutput/UserInputOutput.js"],"names":["module","exports","ProjectDetail","className","Style","HeadStyle","BodyStyle","UserOutput","props","style","textAlign","padding","margin","name","age","children","UserInput","userName","type","onChange","changeName","id","changeId","UserInputOutput","useState","personName","Name","PersonName","setPersonName","personId","Id","PersonId","setPersonId","e","target","value","onClick","Math","round","random","toString","slice"],"mappings":"0HACAA,EAAOC,QAAU,CAAC,UAAY,iDAAiD,UAAY,iDAAiD,YAAc,mDAAmD,UAAY,iDAAiD,YAAc,qD,iFCqBzQC,EAnBO,WACpB,OACE,sBAAKC,UAAWC,IAAMC,UAAtB,UACE,oBAAIF,UAAWC,IAAME,UAArB,yCACA,+BACE,qFACA,mGACA,iIACA,+GACA,oHACA,mGACA,0IACA,gIACA,wHACA,4JCFOC,EAbI,SAACC,GAClB,OACE,gCACE,oBAAIC,MAAO,CAAEC,UAAW,SAAUC,QAAS,qBAAsBC,OAAQ,QAAzE,8CACA,gDACkBJ,EAAMK,KADxB,KAC+B,uBAD/B,mBACqDL,EAAMM,IAD3D,KACiE,uBAAM,uBADvE,wPAEiEN,EAAMO,SAFvE,KAEkF,uBAFlF,+BCeSC,EAnBG,SAACR,GAEjB,OACE,gCACE,0DAEA,4CACcA,EAAMS,SADpB,IAC8B,uBAD9B,IACqC,uBADrC,cAEa,uBAAOC,KAAK,OAAOC,SAAUX,EAAMY,gBAGhD,0CACYZ,EAAMa,GADlB,IACsB,uBADtB,IAC6B,uBAD7B,YAEW,uBAAOH,KAAK,OAAOC,SAAUX,EAAMc,kBCqCrCC,UA/CS,SAACf,GAAW,IAAD,EACGgB,mBAAS,CAAEC,WAAY,gBAAiBC,KAAM,KADjD,mBAC1BC,EAD0B,KACdC,EADc,OAEDJ,mBAAS,CAAEK,SAAU,UAAWC,GAAI,MAFnC,mBAE1BC,EAF0B,KAEhBC,EAFgB,KAwBjC,OACE,gCACE,cAAC,EAAD,IAEE,gCACE,cAAC,EAAD,CAAYnB,KAAMc,EAAWF,WAAYX,IAAKiB,EAASF,SAAvD,wBAIA,cAAC,EAAD,CAAWZ,SAAUU,EAAWF,YAAcE,EAAWD,KAAML,GAAIU,EAASF,UAAYE,EAASD,GAAIV,WAAY,SAACa,GArBxHL,EAAc,CAAEF,KAqBgIO,EArBpHC,OAAOC,SAqBiHb,SAAU,SAACW,GAjB/JD,EAAY,CAAEF,GAiBuKG,EAjB7JC,OAAOC,WAmBzB,wBAAQjB,KAAK,SAASkB,QA/BJ,WACxB,IAAMd,EAAWe,KAAKC,MAAsB,IAAhBD,KAAKE,UAC3BnB,EAAaiB,KAAKE,SAASC,SAAS,IAAIC,MAAM,EAAG,IACvDb,EAAc,CAAEH,WAAYL,IAC5BY,EAAY,CAAEH,SAAUP,KA2BlB,yBAIA,wBAAQJ,KAAK,SAASkB,QApBR,WACpBR,EAAc,CAAEH,WAAYE,EAAWD,OACvCM,EAAY,CAAEH,SAAUE,EAASD,MAkB3B","file":"static/js/3.9a861f1b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"HeadStyle\":\"ProjectDetail-UserInputOutput_HeadStyle__2D-9M\",\"BodyStyle\":\"ProjectDetail-UserInputOutput_BodyStyle__1KZae\",\"FormControl\":\"ProjectDetail-UserInputOutput_FormControl__2s5Lf\",\"CharStyle\":\"ProjectDetail-UserInputOutput_CharStyle__2Gq0g\",\"TextChecker\":\"ProjectDetail-UserInputOutput_TextChecker__2Qjek\"};","import React from \"react\";\r\nimport Style from \"./ProjectDetail-UserInputOutput.module.css\"\r\n\r\nconst ProjectDetail = () => {\r\n  return (\r\n    <div className={Style.HeadStyle}>\r\n      <h1 className={Style.BodyStyle}> User Input Output (basic) </h1>\r\n      <ol>\r\n        <li>Create TWO new components: UserInput and UserOutput</li>\r\n        <li>UserInput should hold an input element, UserOutput two paragraphs</li>\r\n        <li>Output multiple UserOutput components in the App component (any paragraph texts of your choice)</li>\r\n        <li>Pass a username (of your choice) to UserOutput via props and display it there</li>\r\n        <li>Add state to the App component (=&gt; the username) and pass the user utput component</li>\r\n        <li>Add a method to manipulate the state (=&gt; an event-handler method)</li>\r\n        <li>Pass the event-handler method reference to the UserInput component and bind it to the input-change event</li>\r\n        <li>Ensure that the new input entered by the user overwrites the old username passed to UserOutput</li>\r\n        <li>Add two-way-binding to your input (in UserInput) to also display the starting username</li>\r\n        <li>Add styling of your choice to your components/ elements in the components - both with inline styles and stylesheets</li>\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\nexport default ProjectDetail;\r\n","import React from \"react\";\r\n\r\nconst UserOutput = (props) => {\r\n  return (\r\n    <div>\r\n      <h2 style={{ textAlign: \"center\", padding: \"10px 30rem 0px 0px\", margin: \"50px\" }}> CREATE YOUR OWN EMAIL TEMPLATE </h2>\r\n      <p>\r\n        Hii My Name is {props.name}. <br/>My Id Number is {props.age}. <br /><br /> This is my official project and my idea is to learn react and then work as a freelancer. I want be fully accuiped with latest tech and update my kowledge to work further on my plans\r\n        but before that i need to go through a lot my plan is to be a {props.children}. <br />\r\n        Thank you for reading\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserOutput;\r\n","import React from \"react\";\r\n\r\nconst UserInput = (props) => {\r\n  // console.log(props)\r\n  return (\r\n    <div>\r\n      <p>Update your login details</p>\r\n\r\n      <p>\r\n        UserName : {props.userName} <br /> <br />\r\n        UserName : <input type=\"text\" onChange={props.changeName}  />\r\n      </p>\r\n\r\n      <p>\r\n        UserId : {props.id} <br /> <br />\r\n        Userid : <input type=\"text\" onChange={props.changeId} />\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserInput;\r\n","import React, { useState } from \"react\";\r\nimport ProjectDetail from \"./userInputOutput/ProjectDetail-UserInputOutput\";\r\nimport UserOutput from \"./userInputOutput/UserOutput\";\r\nimport UserInput from \"./userInputOutput/UserInput\";\r\n\r\nconst UserInputOutput = (props) => {\r\n  const [PersonName, setPersonName] = useState({ personName: \"Viishesh Jain\", Name: \"\" });\r\n  const [PersonId, setPersonId] = useState({ personId: \"#23Bacd\", Id: \" \" });\r\n\r\n  const autoAssignHandler = () => {\r\n    const changeId = Math.round(Math.random() * 100000);\r\n    const changeName = Math.random().toString(36).slice(4, 10);\r\n    setPersonName({ personName: changeName });\r\n    setPersonId({ personId: changeId });\r\n  };\r\n\r\n  const updateNameHandler = (event) => {\r\n    setPersonName({ Name: event.target.value });\r\n  };\r\n\r\n  const updateIdHandler = (event) => {\r\n    setPersonId({ Id: event.target.value });\r\n  };\r\n\r\n  const updateHandler = () => {\r\n    setPersonName({ personName: PersonName.Name });\r\n    setPersonId({ personId: PersonId.Id });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ProjectDetail />\r\n\r\n        <div>\r\n          <UserOutput name={PersonName.personName} age={PersonId.personId}>\r\n            Hiilet see\r\n          </UserOutput>\r\n\r\n          <UserInput userName={PersonName.personName || PersonName.Name} id={PersonId.personId || PersonId.Id} changeName={(e) => updateNameHandler(e)} changeId={(e) => updateIdHandler(e)} />\r\n\r\n          <button type=\"submit\" onClick={autoAssignHandler}>\r\n            Auto Assign\r\n          </button>\r\n\r\n          <button type=\"submit\" onClick={updateHandler}>\r\n            Update\r\n          </button>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserInputOutput;\r\n"],"sourceRoot":""}